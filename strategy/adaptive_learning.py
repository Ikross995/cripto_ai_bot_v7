#!/usr/bin/env python3
"""
Adaptive Learning System

–°–∏—Å—Ç–µ–º–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏.
"""

import asyncio
import json
import numpy as np
import pandas as pd
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from collections import deque
import logging

from loguru import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –ò–ò
try:
    from strategy.advanced_intelligence import AdvancedIntelligenceSystem
    ADVANCED_AI_AVAILABLE = True
    logger.info("üß† [ADAPTIVE_LEARNING] Advanced Intelligence System available")
except ImportError as e:
    ADVANCED_AI_AVAILABLE = False
    logger.warning(f"üß† [ADAPTIVE_LEARNING] Advanced AI not available: {e}")

from core.config import Config
from core.constants import OrderSide


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    win_rate: float = 0.0
    
    # P&L –º–µ—Ç—Ä–∏–∫–∏
    total_pnl: float = 0.0
    total_pnl_pct: float = 0.0
    avg_win: float = 0.0
    avg_loss: float = 0.0
    profit_factor: float = 0.0
    
    # –†–∏—Å–∫ –º–µ—Ç—Ä–∏–∫–∏
    max_drawdown: float = 0.0
    max_consecutive_losses: int = 0
    current_streak: int = 0
    sharpe_ratio: float = 0.0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_hold_time: float = 0.0
    last_updated: datetime = None
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    confidence_threshold: float = 0.45
    position_size_multiplier: float = 1.0
    dca_enabled: bool = True


@dataclass
class TradeRecord:
    """–ó–∞–ø–∏—Å—å –æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–µ."""
    
    timestamp: datetime
    symbol: str
    side: str  # 'BUY' or 'SELL'
    entry_price: float
    exit_price: float
    quantity: float
    pnl: float
    pnl_pct: float
    hold_time_seconds: float
    signal_strength: float
    market_conditions: Dict[str, Any]
    was_dca: bool = False
    exit_reason: str = "unknown"  # 'tp', 'sl', 'manual', 'timeout'


class AdaptiveLearningSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö/—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π
    """
    
    def __init__(self, config: Config):
        self.config = config
        self.data_dir = Path("adaptive_learning_data")
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.trades_file = self.data_dir / "trades_history.json"
        self.metrics_file = self.data_dir / "performance_metrics.json"
        self.adaptations_file = self.data_dir / "adaptations_log.json"
        
        # –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
        self.current_metrics = PerformanceMetrics()
        self.trades_history: deque = deque(maxlen=1000)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–¥–µ–ª–æ–∫
        self.adaptations_log: List[Dict] = []
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        self.learning_rate = 0.1
        self.min_trades_for_adaptation = 10
        self.adaptation_interval_hours = 6
        self.last_adaptation_time = datetime.now(timezone.utc)
        
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.ab_test_active = False
        self.ab_test_variant = "A"  # A –∏–ª–∏ B
        self.ab_test_start_time = None
        self.ab_test_duration_hours = 24
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ò–ò
        self.advanced_ai = None
        if ADVANCED_AI_AVAILABLE:
            try:
                self.advanced_ai = AdvancedIntelligenceSystem()
                logger.info("üß† [ADVANCED_AI] Integrated into adaptive learning")
            except Exception as e:
                logger.error(f"‚ùå [ADVANCED_AI] Failed to initialize: {e}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self._load_historical_data()
        
        logger.info("ü§ñ [ADAPTIVE_LEARNING] System initialized")
        logger.info(f"üìä [METRICS] Loaded {len(self.trades_history)} historical trades")
        
    def _load_historical_data(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∏ –º–µ—Ç—Ä–∏–∫–∞—Ö."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏
            if self.trades_file.exists():
                with open(self.trades_file, 'r') as f:
                    trades_data = json.load(f)
                    for trade_data in trades_data:
                        trade_data['timestamp'] = datetime.fromisoformat(trade_data['timestamp'])
                        self.trades_history.append(TradeRecord(**trade_data))
                        
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if self.metrics_file.exists():
                with open(self.metrics_file, 'r') as f:
                    metrics_data = json.load(f)
                    if 'last_updated' in metrics_data:
                        metrics_data['last_updated'] = datetime.fromisoformat(metrics_data['last_updated'])
                    self.current_metrics = PerformanceMetrics(**metrics_data)
                    
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ –∞–¥–∞–ø—Ç–∞—Ü–∏–π
            if self.adaptations_file.exists():
                with open(self.adaptations_file, 'r') as f:
                    self.adaptations_log = json.load(f)
                    
        except Exception as e:
            logger.error(f"‚ùå [ADAPTIVE_LEARNING] Failed to load historical data: {e}")
            
    def _save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫."""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫–∏
            trades_data = []
            for trade in self.trades_history:
                trade_dict = asdict(trade)
                trade_dict['timestamp'] = trade.timestamp.isoformat()
                trades_data.append(trade_dict)
                
            with open(self.trades_file, 'w') as f:
                json.dump(trades_data, f, indent=2, default=str)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_dict = asdict(self.current_metrics)
            if self.current_metrics.last_updated:
                metrics_dict['last_updated'] = self.current_metrics.last_updated.isoformat()
                
            with open(self.metrics_file, 'w') as f:
                json.dump(metrics_dict, f, indent=2, default=str)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            with open(self.adaptations_file, 'w') as f:
                json.dump(self.adaptations_log, f, indent=2, default=str)
                
        except Exception as e:
            logger.error(f"‚ùå [ADAPTIVE_LEARNING] Failed to save data: {e}")
            
    async def record_trade(self, trade: TradeRecord) -> None:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            logger.info(f"üìù [TRADE_RECORD] {trade.symbol} {trade.side}: PnL {trade.pnl:+.2f} ({trade.pnl_pct:+.2f}%)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.trades_history.append(trade)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            await self._update_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
            await self._check_adaptation_needed()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self._save_data()
            
        except Exception as e:
            logger.error(f"‚ùå [TRADE_RECORD] Failed to record trade: {e}")
            
    async def _update_metrics(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            if not self.trades_history:
                return
                
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–¥—Å—á–µ—Ç—ã
            total_trades = len(self.trades_history)
            winning_trades = sum(1 for t in self.trades_history if t.pnl > 0)
            losing_trades = sum(1 for t in self.trades_history if t.pnl < 0)
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            win_rate = winning_trades / total_trades if total_trades > 0 else 0
            total_pnl = sum(t.pnl for t in self.trades_history)
            
            # P&L —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            wins = [t.pnl for t in self.trades_history if t.pnl > 0]
            losses = [t.pnl for t in self.trades_history if t.pnl < 0]
            
            avg_win = np.mean(wins) if wins else 0
            avg_loss = np.mean(losses) if losses else 0
            
            gross_profit = sum(wins) if wins else 0
            gross_loss = abs(sum(losses)) if losses else 0
            profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            max_drawdown = self._calculate_max_drawdown()
            
            # Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            returns = [t.pnl_pct for t in self.trades_history]
            sharpe_ratio = np.mean(returns) / np.std(returns) if len(returns) > 1 and np.std(returns) > 0 else 0
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
            avg_hold_time = np.mean([t.hold_time_seconds for t in self.trades_history])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.current_metrics = PerformanceMetrics(
                total_trades=total_trades,
                winning_trades=winning_trades,
                losing_trades=losing_trades,
                win_rate=win_rate,
                total_pnl=total_pnl,
                avg_win=avg_win,
                avg_loss=avg_loss,
                profit_factor=profit_factor,
                max_drawdown=max_drawdown,
                sharpe_ratio=sharpe_ratio,
                avg_hold_time=avg_hold_time,
                last_updated=datetime.now(timezone.utc),
                confidence_threshold=self.current_metrics.confidence_threshold,
                position_size_multiplier=self.current_metrics.position_size_multiplier,
                dca_enabled=self.current_metrics.dca_enabled
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if total_trades % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 —Å–¥–µ–ª–æ–∫
                await self._log_performance_summary()
                
        except Exception as e:
            logger.error(f"‚ùå [METRICS_UPDATE] Failed to update metrics: {e}")
            
    def _calculate_max_drawdown(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É."""
        if not self.trades_history:
            return 0.0
            
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è P&L
        cumulative_pnl = []
        running_total = 0
        
        for trade in self.trades_history:
            running_total += trade.pnl
            cumulative_pnl.append(running_total)
            
        if not cumulative_pnl:
            return 0.0
            
        # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        peak = cumulative_pnl[0]
        max_dd = 0.0
        
        for value in cumulative_pnl:
            if value > peak:
                peak = value
            else:
                drawdown = peak - value
                if drawdown > max_dd:
                    max_dd = drawdown
                    
        return max_dd
        
    async def _check_adaptation_needed(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            time_since_last = (datetime.now(timezone.utc) - self.last_adaptation_time).total_seconds() / 3600
            
            should_adapt = (
                len(self.trades_history) >= self.min_trades_for_adaptation and
                time_since_last >= self.adaptation_interval_hours and
                len(self.trades_history) % 20 == 0  # –ö–∞–∂–¥—ã–µ 20 —Å–¥–µ–ª–æ–∫
            )
            
            if should_adapt:
                logger.info("üß† [ADAPTATION] Triggering parameter adaptation...")
                await self._adapt_parameters()
                self.last_adaptation_time = datetime.now(timezone.utc)
                
        except Exception as e:
            logger.error(f"‚ùå [ADAPTATION_CHECK] Failed to check adaptation: {e}")
            
    async def _adapt_parameters(self) -> None:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            old_params = {
                'confidence_threshold': self.current_metrics.confidence_threshold,
                'position_size_multiplier': self.current_metrics.position_size_multiplier,
                'dca_enabled': self.current_metrics.dca_enabled
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
            recent_trades = list(self.trades_history)[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–¥–µ–ª–æ–∫
            
            if len(recent_trades) < 10:
                return
                
            # 1. –ê–¥–∞–ø—Ç–∞—Ü–∏—è confidence threshold
            await self._adapt_confidence_threshold(recent_trades)
            
            # 2. –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            await self._adapt_position_sizing(recent_trades)
            
            # 3. –ê–¥–∞–ø—Ç–∞—Ü–∏—è DCA –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await self._adapt_dca_settings(recent_trades)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            new_params = {
                'confidence_threshold': self.current_metrics.confidence_threshold,
                'position_size_multiplier': self.current_metrics.position_size_multiplier,
                'dca_enabled': self.current_metrics.dca_enabled
            }
            
            adaptation_record = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'trigger': 'performance_analysis',
                'old_params': old_params,
                'new_params': new_params,
                'performance_metrics': {
                    'win_rate': self.current_metrics.win_rate,
                    'profit_factor': self.current_metrics.profit_factor,
                    'max_drawdown': self.current_metrics.max_drawdown,
                    'total_trades': self.current_metrics.total_trades
                }
            }
            
            self.adaptations_log.append(adaptation_record)
            
            logger.info("üîß [ADAPTATION] Parameters adapted:")
            for param, old_val in old_params.items():
                new_val = new_params[param]
                if old_val != new_val:
                    logger.info(f"   üìä {param}: {old_val} ‚Üí {new_val}")
                    
        except Exception as e:
            logger.error(f"‚ùå [ADAPTATION] Failed to adapt parameters: {e}")
            
    async def _adapt_confidence_threshold(self, recent_trades: List[TradeRecord]) -> None:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä–æ–≥ confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—è–º confidence
            high_conf_trades = [t for t in recent_trades if t.signal_strength > 1.5]
            low_conf_trades = [t for t in recent_trades if 0.8 <= t.signal_strength <= 1.2]
            
            if high_conf_trades and low_conf_trades:
                high_conf_win_rate = sum(1 for t in high_conf_trades if t.pnl > 0) / len(high_conf_trades)
                low_conf_win_rate = sum(1 for t in low_conf_trades if t.pnl > 0) / len(low_conf_trades)
                
                # –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π confidence –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ
                if high_conf_win_rate > low_conf_win_rate + 0.1:  # 10% —Ä–∞–∑–Ω–∏—Ü–∞
                    # –ü–æ–≤—ã—à–∞–µ–º threshold –¥–ª—è –±–æ–ª–µ–µ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                    new_threshold = min(1.0, self.current_metrics.confidence_threshold + 0.05)
                    self.current_metrics.confidence_threshold = new_threshold
                    logger.info(f"üéØ [CONFIDENCE] Raised threshold: high_conf_wr={high_conf_win_rate:.2%}, low_conf_wr={low_conf_win_rate:.2%}")
                    
                elif low_conf_win_rate > high_conf_win_rate and self.current_metrics.win_rate > 0.55:
                    # –ü–æ–Ω–∏–∂–∞–µ–º threshold –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
                    new_threshold = max(0.3, self.current_metrics.confidence_threshold - 0.03)
                    self.current_metrics.confidence_threshold = new_threshold
                    logger.info(f"üéØ [CONFIDENCE] Lowered threshold: more opportunities needed")
                    
        except Exception as e:
            logger.error(f"‚ùå [CONFIDENCE_ADAPT] Failed to adapt confidence: {e}")
            
    async def _adapt_position_sizing(self, recent_trades: List[TradeRecord]) -> None:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            recent_win_rate = sum(1 for t in recent_trades if t.pnl > 0) / len(recent_trades)
            recent_profit_factor = self._calculate_profit_factor(recent_trades)
            recent_max_dd = self._calculate_recent_max_drawdown(recent_trades)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
            if recent_win_rate > 0.65 and recent_profit_factor > 1.5:
                # –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –º–æ–∂–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä
                new_multiplier = min(1.5, self.current_metrics.position_size_multiplier * 1.1)
                self.current_metrics.position_size_multiplier = new_multiplier
                logger.info(f"üìà [POSITION_SIZE] Increased: win_rate={recent_win_rate:.2%}, pf={recent_profit_factor:.2f}")
                
            elif recent_win_rate < 0.45 or recent_max_dd > 100:  # –ü—Ä–æ—Å–∞–¥–∫–∞ >$100
                # –ü–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
                new_multiplier = max(0.5, self.current_metrics.position_size_multiplier * 0.9)
                self.current_metrics.position_size_multiplier = new_multiplier
                logger.info(f"üìâ [POSITION_SIZE] Decreased: win_rate={recent_win_rate:.2%}, max_dd=${recent_max_dd:.0f}")
                
        except Exception as e:
            logger.error(f"‚ùå [POSITION_SIZE_ADAPT] Failed to adapt position sizing: {e}")
            
    async def _adapt_dca_settings(self, recent_trades: List[TradeRecord]) -> None:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DCA –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            dca_trades = [t for t in recent_trades if t.was_dca]
            non_dca_trades = [t for t in recent_trades if not t.was_dca]
            
            if dca_trades and non_dca_trades:
                dca_win_rate = sum(1 for t in dca_trades if t.pnl > 0) / len(dca_trades)
                non_dca_win_rate = sum(1 for t in non_dca_trades if t.pnl > 0) / len(non_dca_trades)
                
                # –ï—Å–ª–∏ DCA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if dca_win_rate < non_dca_win_rate - 0.15:  # –ù–∞ 15% —Ö—É–∂–µ
                    if self.current_metrics.dca_enabled:
                        logger.warning(f"üö´ [DCA] Disabling DCA: dca_wr={dca_win_rate:.2%} vs non_dca_wr={non_dca_win_rate:.2%}")
                        self.current_metrics.dca_enabled = False
                        
                # –ï—Å–ª–∏ DCA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∞ –æ–Ω –≤—ã–∫–ª—é—á–µ–Ω
                elif dca_win_rate > non_dca_win_rate + 0.1 and not self.current_metrics.dca_enabled:
                    logger.info(f"‚úÖ [DCA] Enabling DCA: dca_wr={dca_win_rate:.2%} vs non_dca_wr={non_dca_win_rate:.2%}")
                    self.current_metrics.dca_enabled = True
                    
        except Exception as e:
            logger.error(f"‚ùå [DCA_ADAPT] Failed to adapt DCA settings: {e}")
            
    def _calculate_profit_factor(self, trades: List[TradeRecord]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç profit factor –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫."""
        if not trades:
            return 0.0
            
        gross_profit = sum(t.pnl for t in trades if t.pnl > 0)
        gross_loss = abs(sum(t.pnl for t in trades if t.pnl < 0))
        
        return gross_profit / gross_loss if gross_loss > 0 else float('inf')
        
    def _calculate_recent_max_drawdown(self, trades: List[TradeRecord]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫."""
        if not trades:
            return 0.0
            
        cumulative_pnl = []
        running_total = 0
        
        for trade in trades:
            running_total += trade.pnl
            cumulative_pnl.append(running_total)
            
        if not cumulative_pnl:
            return 0.0
            
        peak = cumulative_pnl[0]
        max_dd = 0.0
        
        for value in cumulative_pnl:
            if value > peak:
                peak = value
            else:
                drawdown = peak - value
                if drawdown > max_dd:
                    max_dd = drawdown
                    
        return max_dd
        
    async def _log_performance_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            logger.info("=" * 60)
            logger.info("üìä ADAPTIVE LEARNING PERFORMANCE SUMMARY")
            logger.info("=" * 60)
            logger.info(f"üìà Total Trades: {self.current_metrics.total_trades}")
            logger.info(f"üéØ Win Rate: {self.current_metrics.win_rate:.1%}")
            logger.info(f"üí∞ Total P&L: ${self.current_metrics.total_pnl:+.2f}")
            logger.info(f"üìä Profit Factor: {self.current_metrics.profit_factor:.2f}")
            logger.info(f"üìâ Max Drawdown: ${self.current_metrics.max_drawdown:.2f}")
            logger.info(f"‚ö° Sharpe Ratio: {self.current_metrics.sharpe_ratio:.2f}")
            logger.info("")
            logger.info("üéõÔ∏è CURRENT ADAPTIVE PARAMETERS:")
            logger.info(f"   üéØ Confidence Threshold: {self.current_metrics.confidence_threshold:.3f}")
            logger.info(f"   üìä Position Size Multiplier: {self.current_metrics.position_size_multiplier:.2f}x")
            logger.info(f"   üõ°Ô∏è DCA Enabled: {self.current_metrics.dca_enabled}")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå [PERFORMANCE_LOG] Failed to log summary: {e}")
            
    async def start_ab_test(self, variant_a_params: Dict, variant_b_params: Dict) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        try:
            import random
            
            self.ab_test_active = True
            self.ab_test_start_time = datetime.now(timezone.utc)
            self.ab_test_variant = "A" if random.random() < 0.5 else "B"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            params = variant_a_params if self.ab_test_variant == "A" else variant_b_params
            
            for param, value in params.items():
                setattr(self.current_metrics, param, value)
                
            logger.info(f"üß™ [A/B_TEST] Started variant {self.ab_test_variant} for {self.ab_test_duration_hours}h")
            logger.info(f"üß™ [A/B_TEST] Params: {params}")
            
        except Exception as e:
            logger.error(f"‚ùå [A/B_TEST] Failed to start A/B test: {e}")
            
    async def check_ab_test_completion(self) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        if not self.ab_test_active or not self.ab_test_start_time:
            return None
            
        time_elapsed = (datetime.now(timezone.utc) - self.ab_test_start_time).total_seconds() / 3600
        
        if time_elapsed >= self.ab_test_duration_hours:
            # A/B —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            self.ab_test_active = False
            
            results = {
                'variant': self.ab_test_variant,
                'duration_hours': time_elapsed,
                'final_metrics': asdict(self.current_metrics),
                'trades_during_test': len([t for t in self.trades_history 
                                         if t.timestamp >= self.ab_test_start_time])
            }
            
            logger.info(f"üß™ [A/B_TEST] Completed variant {self.ab_test_variant}")
            logger.info(f"üß™ [A/B_TEST] Results: {results['trades_during_test']} trades, "
                       f"WR: {self.current_metrics.win_rate:.1%}")
            
            return results
            
        return None
        
    def get_current_adaptive_params(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ."""
        return {
            'confidence_threshold': self.current_metrics.confidence_threshold,
            'position_size_multiplier': self.current_metrics.position_size_multiplier,
            'dca_enabled': self.current_metrics.dca_enabled,
            'is_ab_testing': self.ab_test_active,
            'ab_variant': self.ab_test_variant if self.ab_test_active else None
        }
        
    def get_performance_metrics(self) -> PerformanceMetrics:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        return self.current_metrics
        
    async def emergency_stop_learning(self) -> None:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö."""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.current_metrics.confidence_threshold = 0.8  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
            self.current_metrics.position_size_multiplier = 0.5  # –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            self.current_metrics.dca_enabled = False  # –û—Ç–∫–ª—é—á–∞–µ–º DCA
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º A/B —Ç–µ—Å—Ç—ã
            self.ab_test_active = False
            
            logger.critical("üö® [EMERGENCY_STOP] Learning system switched to conservative mode!")
            logger.critical("üö® [EMERGENCY_STOP] All adaptive features temporarily disabled")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            emergency_record = {
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'trigger': 'emergency_stop',
                'reason': 'critical_losses',
                'conservative_params': {
                    'confidence_threshold': 0.8,
                    'position_size_multiplier': 0.5,
                    'dca_enabled': False
                }
            }
            
            self.adaptations_log.append(emergency_record)
            self._save_data()
            
        except Exception as e:
            logger.error(f"‚ùå [EMERGENCY_STOP] Failed to execute emergency stop: {e}")
    
    async def get_advanced_ai_recommendations(self, market_data: Dict = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ò–ò."""
        try:
            if not self.advanced_ai:
                logger.warning("üß† [ADVANCED_AI] Not available for recommendations")
                return {}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            trade_history_for_ai = []
            for trade in self.trades_history:
                trade_data = {
                    'pnl': trade.pnl,
                    'confidence': trade.signal_strength,
                    'timestamp': trade.timestamp,
                    'was_dca': trade.was_dca,
                    'side': trade.side,
                    'symbol': trade.symbol,
                    'hold_duration_minutes': trade.hold_time_seconds / 60,
                    'market_volatility': trade.market_conditions.get('volatility', 0.02),
                    'volume_ratio': trade.market_conditions.get('volume_ratio', 1.0)
                }
                trade_history_for_ai.append(trade_data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = await self.advanced_ai.get_intelligent_recommendations(
                current_market_data=market_data or {},
                recent_trades=trade_history_for_ai
            )
            
            logger.info(f"üß† [ADVANCED_AI] Generated recommendations with confidence: {recommendations.get('confidence', 0):.2f}")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå [ADVANCED_AI] Failed to get recommendations: {e}")
            return {}
    
    async def start_advanced_ab_testing(self, parameter_variants: List[Dict]) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        try:
            if not self.advanced_ai:
                logger.warning("üß† [ADVANCED_AI] Not available for advanced A/B testing")
                return {}
            
            result = await self.advanced_ai.run_advanced_ab_testing(
                parameter_variants=parameter_variants,
                min_trades_per_variant=15
            )
            
            if result.get('test_started'):
                logger.info(f"üß™ [ADVANCED_AB] Started testing with {result['variants']} variants")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [ADVANCED_AB] Failed to start advanced A/B testing: {e}")
            return {}
    
    async def update_advanced_ab_test(self, trade: TradeRecord) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if not self.advanced_ai or not self.advanced_ai.active_ab_tests:
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–¥–µ–ª–∫–∏
            selected_variant = self.advanced_ai.select_ab_variant_ucb()
            if selected_variant:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞
                for param, value in selected_variant.parameters.items():
                    if hasattr(self.current_metrics, param):
                        setattr(self.current_metrics, param, value)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏
                await self.advanced_ai.update_ab_test_results(
                    variant_name=selected_variant.name,
                    trade_pnl=trade.pnl,
                    trade_metrics={
                        'win_rate': self.current_metrics.win_rate,
                        'profit_factor': self.current_metrics.profit_factor
                    }
                )
                
                logger.debug(f"üß™ [ADVANCED_AB] Updated {selected_variant.name} with PnL: {trade.pnl:+.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå [ADVANCED_AB] Failed to update A/B test: {e}")
    
    async def check_advanced_ab_significance(self) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ A/B —Ç–µ—Å—Ç–∞."""
        try:
            if not self.advanced_ai:
                return None
            
            significance_results = await self.advanced_ai.analyze_ab_test_significance()
            
            if significance_results:
                logger.info(f"üìä [ADVANCED_AB] Analysis: {significance_results['recommendation']}")
                
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if significance_results['recommendation'].startswith('IMPLEMENT'):
                    best_variant = significance_results['best_variant']
                    logger.info(f"üèÜ [ADVANCED_AB] Implementing winner: {best_variant}")
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    for variant in self.advanced_ai.active_ab_tests:
                        if variant.name == best_variant:
                            for param, value in variant.parameters.items():
                                if hasattr(self.current_metrics, param):
                                    setattr(self.current_metrics, param, value)
                            break
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç
                    self.advanced_ai.active_ab_tests = []
                    self.advanced_ai.bandit_arms = {}
            
            return significance_results
            
        except Exception as e:
            logger.error(f"‚ùå [ADVANCED_AB] Failed to check significance: {e}")
            return None
    
    async def optimize_parameters_with_ai(self, target_metric: str = 'sharpe_ratio') -> Dict[str, float]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ò–ò."""
        try:
            if not self.advanced_ai:
                logger.warning("üß† [ADVANCED_AI] Not available for optimization")
                return {}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            trade_history_for_ai = []
            for trade in self.trades_history:
                trade_data = {
                    'pnl': trade.pnl,
                    'confidence': trade.signal_strength,
                    'timestamp': trade.timestamp,
                    'was_dca': trade.was_dca,
                    'side': trade.side
                }
                trade_history_for_ai.append(trade_data)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ë–∞–π–µ—Å–æ–≤—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            optimal_params = await self.advanced_ai.optimize_parameters_bayesian(
                trade_history=trade_history_for_ai,
                target_metric=target_metric
            )
            
            if optimal_params:
                logger.info(f"üéØ [AI_OPTIMIZATION] Optimal parameters found for {target_metric}")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param, value in optimal_params.items():
                    if hasattr(self.current_metrics, param):
                        setattr(self.current_metrics, param, value)
                        logger.info(f"   üìä {param}: {value:.3f}")
            
            return optimal_params
            
        except Exception as e:
            logger.error(f"‚ùå [AI_OPTIMIZATION] Failed: {e}")
            return {}
    
    async def shutdown_advanced_ai(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ò–ò."""
        try:
            if self.advanced_ai:
                await self.advanced_ai.shutdown()
                logger.info("üß† [ADVANCED_AI] Shutdown complete")
            
        except Exception as e:
            logger.error(f"‚ùå [ADVANCED_AI] Shutdown error: {e}")