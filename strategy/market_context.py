#!/usr/bin/env python3
"""
Market Context Manager

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
–ü—Ä–æ–≤–æ–¥–∏—Ç –±—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
"""

import asyncio
import json
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Dict, List, Optional, Any

import pandas as pd
from loguru import logger

from core.config import Config
from core.constants import OrderSide, Timeframe
from core.types import Signal
from data.fetchers import HistoricalDataFetcher


@dataclass
class MarketContextData:
    """–î–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä—ã–Ω–∫–∞."""
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    analysis_start: datetime
    analysis_end: datetime
    last_update: datetime
    
    # –†—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    overall_trend: str  # "BULLISH", "BEARISH", "SIDEWAYS"
    volatility_level: str  # "LOW", "MEDIUM", "HIGH", "EXTREME"
    recent_signals: List[Dict[str, Any]]
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    backtest_win_rate: float
    backtest_total_trades: int
    backtest_pnl_pct: float
    backtest_max_drawdown: float
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    suggested_confidence_threshold: float
    suggested_position_size_multiplier: float
    risk_warning_level: str  # "LOW", "MEDIUM", "HIGH", "CRITICAL"
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    active_positions: List[Dict[str, Any]]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    market_conditions: Dict[str, Any]


class MarketContextManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ü—Ä–æ–≤–æ–¥–∏—Ç –±—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è  
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ
    """
    
    def __init__(self, config: Config, data_fetcher: HistoricalDataFetcher):
        self.config = config
        self.data_fetcher = data_fetcher
        self.context_file = Path("market_context.json")
        self.current_context: Optional[MarketContextData] = None
        
    async def initialize_market_context(self, force_refresh: bool = False) -> MarketContextData:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏.
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            
        Returns:
            MarketContextData: –î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–æ—á–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        """
        logger.info("üîç [MARKET_CONTEXT] Initializing market context analysis...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–π –∫—ç—à
        if not force_refresh and self._is_context_fresh():
            logger.info("üìã [MARKET_CONTEXT] Using cached market context (fresh)")
            return self._load_cached_context()
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("üßÆ [MARKET_CONTEXT] Performing fresh market analysis...")
        
        # 1. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        end_time = datetime.now(timezone.utc)
        start_time = end_time - timedelta(days=7)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üìä [MARKET_CONTEXT] Fetching data: {start_time} to {end_time}")
        
        symbols = getattr(self.config, 'symbols', ['BTCUSDT'])
        if isinstance(symbols, str):
            symbols = [symbols]
        
        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∏–º–≤–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        primary_symbol = symbols[0] if symbols else 'BTCUSDT'
        
        try:
            # FIXED: Use direct Binance client to get klines, then convert to DataFrame
            if hasattr(self.data_fetcher, 'client') and self.data_fetcher.client:
                logger.info(f"üìä [MARKET_CONTEXT] Fetching {primary_symbol} 1h data via direct API...")
                
                # Get raw klines from Binance
                raw_klines = self.data_fetcher.client.get_klines(
                    symbol=primary_symbol,
                    interval='1h',
                    limit=168  # 7 days * 24 hours
                )
                
                if not raw_klines:
                    logger.error("‚ùå [MARKET_CONTEXT] No klines data received from API!")
                    return self._create_default_context()
                
                # Convert to DataFrame manually  
                import pandas as pd
                columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume',
                          'close_time', 'quote_asset_volume', 'number_of_trades',
                          'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore']
                
                df = pd.DataFrame(raw_klines, columns=columns)
                
                # Convert timestamp and set as index
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df.set_index('timestamp', inplace=True)
                
                # Convert numeric columns
                numeric_cols = ['open', 'high', 'low', 'close', 'volume']
                for col in numeric_cols:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                logger.info(f"‚úÖ [MARKET_CONTEXT] Converted {len(df)} klines to DataFrame")
                
            else:
                # Fallback to original method
                df = self.data_fetcher.get_historical_data(
                    symbol=primary_symbol,
                    timeframe='1h',
                    start_date=start_time,
                    end_date=end_time,
                    limit=168
                )
            
            if df is None or df.empty:
                logger.error("‚ùå [MARKET_CONTEXT] No historical data available!")
                return self._create_default_context()
                
        except Exception as e:
            logger.error(f"‚ùå [MARKET_CONTEXT] Error fetching data: {e}")
            import traceback
            logger.error(f"‚ùå [MARKET_CONTEXT] Traceback: {traceback.format_exc()}")
            return self._create_default_context()
        
        # 3. –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        market_analysis = self._analyze_market_conditions(df)
        
        # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç
        backtest_results = await self._run_quick_backtest(df, primary_symbol)
        
        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_trading_recommendations(market_analysis, backtest_results)
        
        # 6. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = MarketContextData(
            analysis_start=start_time,
            analysis_end=end_time,
            last_update=datetime.now(timezone.utc),
            
            overall_trend=market_analysis['trend'],
            volatility_level=market_analysis['volatility'],
            recent_signals=market_analysis['signals'],
            
            backtest_win_rate=backtest_results['win_rate'],
            backtest_total_trades=backtest_results['total_trades'],
            backtest_pnl_pct=backtest_results['pnl_pct'],
            backtest_max_drawdown=backtest_results['max_drawdown'],
            
            suggested_confidence_threshold=recommendations['confidence_threshold'],
            suggested_position_size_multiplier=recommendations['position_multiplier'],
            risk_warning_level=recommendations['risk_level'],
            
            active_positions=[],  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ exchange
            market_conditions=market_analysis
        )
        
        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._save_context(context)
        self.current_context = context
        
        # 8. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._log_market_summary(context)
        
        return context
    
    def _analyze_market_conditions(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            close_prices = df['close'].values
            high_prices = df['high'].values
            low_prices = df['low'].values
            volumes = df['volume'].values
            
            # 1. –¢—Ä–µ–Ω–¥ (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑)
            recent_change = (close_prices[-1] - close_prices[0]) / close_prices[0] * 100
            
            if recent_change > 5:
                trend = "BULLISH"
            elif recent_change < -5:
                trend = "BEARISH"
            else:
                trend = "SIDEWAYS"
            
            # 2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR proxy)
            daily_ranges = (high_prices - low_prices) / close_prices
            avg_volatility = float(daily_ranges.mean())
            
            if avg_volatility > 0.05:
                volatility = "EXTREME"
            elif avg_volatility > 0.03:
                volatility = "HIGH"
            elif avg_volatility > 0.015:
                volatility = "MEDIUM"
            else:
                volatility = "LOW"
            
            # 3. –û–±—ä–µ–º—ã
            avg_volume = float(volumes.mean())
            recent_volume = float(volumes[-24:].mean())  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            volume_trend = "INCREASING" if recent_volume > avg_volume * 1.2 else "DECREASING" if recent_volume < avg_volume * 0.8 else "STABLE"
            
            # 4. –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            price_range = high_prices.max() - low_prices.min()
            current_price = close_prices[-1]
            support_level = float(low_prices[-48:].min())  # –ú–∏–Ω–∏–º—É–º –∑–∞ 48 —á–∞—Å–æ–≤
            resistance_level = float(high_prices[-48:].max())  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ 48 —á–∞—Å–æ–≤
            
            return {
                'trend': trend,
                'volatility': volatility,
                'price_change_pct': float(recent_change),
                'current_price': float(current_price),
                'support_level': support_level,
                'resistance_level': resistance_level,
                'volume_trend': volume_trend,
                'avg_volatility': avg_volatility,
                'signals': []  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –±—ç–∫—Ç–µ—Å—Ç–µ
            }
            
        except Exception as e:
            logger.error(f"‚ùå [MARKET_CONTEXT] Error analyzing market: {e}")
            return {
                'trend': 'UNKNOWN',
                'volatility': 'MEDIUM',
                'price_change_pct': 0.0,
                'current_price': 0.0,
                'support_level': 0.0,
                'resistance_level': 0.0,
                'volume_trend': 'STABLE',
                'avg_volatility': 0.02,
                'signals': []
            }
    
    async def _run_quick_backtest(self, df: pd.DataFrame, symbol: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            logger.info("üß™ [MARKET_CONTEXT] Running quick backtest...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from strategy.signals import SignalGenerator
            from strategy.risk import RiskManager
            
            signal_generator = SignalGenerator(self.config)
            risk_manager = RiskManager(self.config)
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            trades = []
            signals = []
            current_position = None
            balance = 10000.0  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            initial_balance = balance
            
            for i in range(50, len(df)):  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                current_candles = df.iloc[:i+1]
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª (FIXED: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞)
                    signal_data = signal_generator.generate_signal(
                        symbol=symbol,
                        market_data=current_candles,
                        config=self.config
                    )
                    
                    if signal_data and hasattr(signal_data, 'side') and signal_data.side:
                        signals.append({
                            'timestamp': current_candles.iloc[-1].name,
                            'side': signal_data.side,
                            'strength': getattr(signal_data, 'strength', 0.0),
                            'price': float(current_candles.iloc[-1]['close'])
                        })
                        
                        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                        if not current_position:
                            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                            position_size = balance * 0.02  # 2% —Ä–∏—Å–∫–∞
                            current_position = {
                                'side': signal_data.side,
                                'entry_price': float(current_candles.iloc[-1]['close']),
                                'size': position_size,
                                'entry_time': current_candles.iloc[-1].name
                            }
                        else:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ
                            if current_position['side'] != signal_data.side:
                                exit_price = float(current_candles.iloc[-1]['close'])
                                
                                if current_position['side'] == 'BUY':
                                    pnl = (exit_price - current_position['entry_price']) / current_position['entry_price']
                                else:
                                    pnl = (current_position['entry_price'] - exit_price) / current_position['entry_price']
                                
                                pnl_amount = pnl * current_position['size']
                                balance += pnl_amount
                                
                                trades.append({
                                    'entry_price': current_position['entry_price'],
                                    'exit_price': exit_price,
                                    'side': current_position['side'],
                                    'pnl_pct': pnl * 100,
                                    'pnl_amount': pnl_amount
                                })
                                
                                current_position = None
                
                except Exception as e:
                    logger.debug(f"Signal generation error at index {i}: {e}")
                    continue
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if trades:
                winning_trades = [t for t in trades if t['pnl_amount'] > 0]
                win_rate = len(winning_trades) / len(trades)
                total_pnl_pct = (balance - initial_balance) / initial_balance * 100
                
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                running_balance = initial_balance
                peak_balance = initial_balance
                max_drawdown = 0.0
                
                for trade in trades:
                    running_balance += trade['pnl_amount']
                    if running_balance > peak_balance:
                        peak_balance = running_balance
                    
                    drawdown = (peak_balance - running_balance) / peak_balance
                    if drawdown > max_drawdown:
                        max_drawdown = drawdown
                
                max_drawdown *= 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            else:
                win_rate = 0.0
                total_pnl_pct = 0.0
                max_drawdown = 0.0
            
            logger.info(f"üéØ [BACKTEST] Trades: {len(trades)}, Win Rate: {win_rate:.1%}, PnL: {total_pnl_pct:.2f}%, Max DD: {max_drawdown:.2f}%")
            
            return {
                'total_trades': len(trades),
                'win_rate': win_rate,
                'pnl_pct': total_pnl_pct,
                'max_drawdown': max_drawdown,
                'signals': signals[:10],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
                'trades': trades[-5:] if trades else []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            }
            
        except Exception as e:
            logger.error(f"‚ùå [MARKET_CONTEXT] Backtest error: {e}")
            return {
                'total_trades': 0,
                'win_rate': 0.0,
                'pnl_pct': 0.0,
                'max_drawdown': 0.0,
                'signals': [],
                'trades': []
            }
    
    def _generate_trading_recommendations(self, market_analysis: Dict[str, Any], backtest_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        base_confidence = getattr(self.config, 'bt_conf_min', 0.45)
        base_position_multiplier = 1.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        confidence_adjustment = 0.0
        position_adjustment = 1.0
        risk_level = "MEDIUM"
        
        # 1. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = market_analysis.get('volatility', 'MEDIUM')
        if volatility == "EXTREME":
            confidence_adjustment += 0.3  # –¢—Ä–µ–±—É–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            position_adjustment *= 0.5    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π
            risk_level = "CRITICAL"
        elif volatility == "HIGH":
            confidence_adjustment += 0.15
            position_adjustment *= 0.7
            risk_level = "HIGH"
        elif volatility == "LOW":
            confidence_adjustment -= 0.1  # –ú–æ–∂–µ–º –±—ã—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏
            position_adjustment *= 1.2
        
        # 2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
        trend = market_analysis.get('trend', 'SIDEWAYS')
        if trend == "SIDEWAYS":
            confidence_adjustment += 0.1  # –í –±–æ–∫–æ–≤–∏–∫–µ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            position_adjustment *= 0.8
        
        # 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
        win_rate = backtest_results.get('win_rate', 0.0)
        pnl_pct = backtest_results.get('pnl_pct', 0.0)
        max_drawdown = backtest_results.get('max_drawdown', 0.0)
        
        if win_rate < 0.4:  # –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
            confidence_adjustment += 0.2
            position_adjustment *= 0.6
            if risk_level not in ["HIGH", "CRITICAL"]:
                risk_level = "HIGH"
        elif win_rate > 0.7:  # –í—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
            confidence_adjustment -= 0.1
            position_adjustment *= 1.1
        
        if pnl_pct < -5:  # –£–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            confidence_adjustment += 0.25
            position_adjustment *= 0.5
            risk_level = "CRITICAL"
        
        if max_drawdown > 10:  # –í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            confidence_adjustment += 0.15
            position_adjustment *= 0.7
            if risk_level == "MEDIUM":
                risk_level = "HIGH"
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        final_confidence = max(0.2, min(2.0, base_confidence + confidence_adjustment))
        final_position_multiplier = max(0.1, min(2.0, position_adjustment))
        
        return {
            'confidence_threshold': final_confidence,
            'position_multiplier': final_position_multiplier,
            'risk_level': risk_level,
            'reasoning': {
                'volatility': volatility,
                'trend': trend,
                'win_rate': win_rate,
                'pnl_pct': pnl_pct,
                'max_drawdown': max_drawdown,
                'confidence_adjustment': confidence_adjustment,
                'position_adjustment': position_adjustment
            }
        }
    
    def _is_context_fresh(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–µ–∂–∏–π –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        if not self.context_file.exists():
            return False
        
        try:
            with open(self.context_file, 'r') as f:
                data = json.load(f)
            
            last_update = datetime.fromisoformat(data['last_update'])
            age_hours = (datetime.now(timezone.utc) - last_update).total_seconds() / 3600
            
            return age_hours < 4  # –°—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º –µ—Å–ª–∏ –º–æ–ª–æ–∂–µ 4 —á–∞—Å–æ–≤
            
        except Exception:
            return False
    
    def _load_cached_context(self) -> MarketContextData:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        with open(self.context_file, 'r') as f:
            data = json.load(f)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
        data['analysis_start'] = datetime.fromisoformat(data['analysis_start'])
        data['analysis_end'] = datetime.fromisoformat(data['analysis_end'])
        data['last_update'] = datetime.fromisoformat(data['last_update'])
        
        return MarketContextData(**data)
    
    def _save_context(self, context: MarketContextData) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª."""
        data = asdict(context)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        data['analysis_start'] = context.analysis_start.isoformat()
        data['analysis_end'] = context.analysis_end.isoformat()
        data['last_update'] = context.last_update.isoformat()
        
        with open(self.context_file, 'w') as f:
            json.dump(data, f, indent=2, default=str)
    
    def _create_default_context(self) -> MarketContextData:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
        now = datetime.now(timezone.utc)
        return MarketContextData(
            analysis_start=now - timedelta(hours=24),
            analysis_end=now,
            last_update=now,
            
            overall_trend="UNKNOWN",
            volatility_level="MEDIUM",
            recent_signals=[],
            
            backtest_win_rate=0.0,
            backtest_total_trades=0,
            backtest_pnl_pct=0.0,
            backtest_max_drawdown=0.0,
            
            suggested_confidence_threshold=getattr(self.config, 'bt_conf_min', 0.45),
            suggested_position_size_multiplier=1.0,
            risk_warning_level="MEDIUM",
            
            active_positions=[],
            market_conditions={}
        )
    
    def _log_market_summary(self, context: MarketContextData) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        logger.info("=" * 60)
        logger.info("üìä MARKET CONTEXT ANALYSIS SUMMARY")
        logger.info("=" * 60)
        logger.info(f"üéØ Overall Trend: {context.overall_trend}")
        logger.info(f"üìà Volatility Level: {context.volatility_level}")
        logger.info(f"‚ö†Ô∏è  Risk Warning: {context.risk_warning_level}")
        logger.info("")
        logger.info("üß™ BACKTEST RESULTS (Last 7 Days):")
        logger.info(f"   üìä Total Trades: {context.backtest_total_trades}")
        logger.info(f"   üéØ Win Rate: {context.backtest_win_rate:.1%}")
        logger.info(f"   üí∞ PnL: {context.backtest_pnl_pct:+.2f}%")
        logger.info(f"   üìâ Max Drawdown: {context.backtest_max_drawdown:.2f}%")
        logger.info("")
        logger.info("üéõÔ∏è  TRADING RECOMMENDATIONS:")
        logger.info(f"   üéØ Confidence Threshold: {context.suggested_confidence_threshold:.3f}")
        logger.info(f"   üìä Position Size Multiplier: {context.suggested_position_size_multiplier:.2f}x")
        logger.info("=" * 60)
    
    def get_current_context(self) -> Optional[MarketContextData]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        return self.current_context
    
    async def refresh_context_if_needed(self) -> MarketContextData:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if self.current_context is None:
            return await self.initialize_market_context()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        age_hours = (datetime.now(timezone.utc) - self.current_context.last_update).total_seconds() / 3600
        
        if age_hours > 6:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
            logger.info("üîÑ [MARKET_CONTEXT] Context is old, refreshing...")
            return await self.initialize_market_context(force_refresh=True)
        
        return self.current_context